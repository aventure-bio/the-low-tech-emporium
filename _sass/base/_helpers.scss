// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: '';
  display: table;
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0; /* 1 */
  text-indent: 101%;
  white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}


/**
 * Overflow
 */
.overflow-y {
  overflow-y: auto;
}
.no-overflow-y {
  overflow-y: hidden;
}


/**
 * Size
 */
.w-100   { width: 100%   }
.w-80   { width: 80%   }
.w-100vw { width: 100vw  }
.h-100   { height: 100%  }
.h-100vh { height: 100vh }



/**
 * Hide / Show elements
 */
@media (min-width: 0px) {
  .hidden {
    display: none;
  }
  .show {
    display: initial;
  }
}
@media (min-width: $breakpoint-xs) {
  .hidden-xs {
    display: none;
  }
  .show-xs {
    display: initial;
  }
}
@media (min-width: $breakpoint-sm) {
  .hidden-sm {
    display: none;
  }
  .show-sm {
    display: initial;
  }
}
@media (min-width: $breakpoint-md) {
  .hidden-md {
    display: none;
  }
  .show-md {
    display: initial;
  }
}

@media (min-width: $breakpoint-lg) {
  .hidden-lg {
    display: none;
  }
  .show-lg {
    display: initial;
  }
}

/**
 * Colors
 */
.invert {
  background-color: var(--brand-color);
  color: #fff;
}
.brand-color        { color: var(--menthe) }
.bleu               { color: var(--bleu) }
.bleu-light         { color: var(--bleu-light) }
.menthe             { color: var(--menthe) }
.menthe-light       { color: var(--menthe-light) }
.amande             { color: var(--amande) }
.amande-light       { color: var(--amande-light) }
.vanille            { color: var(--vanille) }
.vanille-light      { color: var(--vanille-light) }
.pamplemousse       { color: var(--pamplemousse) }
.pamplemousse-light { color: var(--pamplemousse-light) }
.lavande            { color: var(--lavande) }
.lavande-light      { color: var(--lavande-light) }

.bg--white              { background-color: white }
.bg--brand-color        { background-color: var(--menthe) }
.bg--bleu               { background-color: var(--bleu) }
.bg--bleu-light         { background-color: var(--bleu-light) }
.bg--menthe             { background-color: var(--menthe) }
.bg--menthe-light       { background-color: var(--menthe-light) }
.bg--amande             { background-color: var(--amande) }
.bg--amande-light       { background-color: var(--amande-light) }
.bg--vanille            { background-color: var(--vanille) }
.bg--vanille-light      { background-color: var(--vanille-light) }
.bg--pamplemousse       { background-color: var(--pamplemousse) }
.bg--pamplemousse-light { background-color: var(--pamplemousse-light) }
.bg--lavande            { background-color: var(--lavande) }
.bg--lavande-light      { background-color: var(--lavande-light) }

/**
 * Text alignements
 */
.ta-center {
  text-align: center;
}
.ta-right {
  text-align: right;
}


/**
 * Position
 */
.relative {
  position: relative;
}
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}


/**
 * Display
 */
.block {
  display: block;
}
.inline-block {
  display: inline-block;
}
.inline {
  display: inline;
}
.inline-flex {
  display: inline-flex;
}
.flex {
  @include flexbox();
}

/**
 * Flexbox
 */
.flex-row          { @include flex-direction(row); }
.flex-row-reverse  { @include flex-direction(row-reverse); }
.flex-col          { @include flex-direction(column); }
.flex-col-reverse  { @include flex-direction(column-reverse); }

.flex-wrap         { @include flex-wrap(wrap); }
.flex-wrap-reverse { @include flex-wrap(wrap-reverse); }

.justify-start   { @include justify-content(flex-start); }
.justify-center  { @include justify-content(center); }
.justify-end     { @include justify-content(flex-end); }
.justify-between { @include justify-content(space-between); }
.justify-around  { @include justify-content(space-around); }

.content-start   { @include align-content(flex-start); }
.content-center  { @include align-content(center); }
.content-end     { @include align-content(flex-end); }
.content-between { @include align-content(space-between); }
.content-around  { @include align-content(space-around); }

.items-stretch   { @include align-items(stretch); }
.items-start     { @include align-items(flex-start); }
.items-center    { @include align-items(center); }
.items-end       { @include align-items(flex-end); }
.items-baseline  { @include align-items(baseline); }

.self-auto    { @include align-self(auto); }
.self-start   { @include align-self(flex-start); }
.self-center  { @include align-self(center); }
.self-end     { @include align-self(flex-end); }
.self-stretch { @include align-self(stretch); }

.flex-shrink    { @include flex-shrink(1); }
.flex-shrink-0  { @include flex-shrink(0); }


/**
 * Text decoration & list style
 */
.no-list-style {
  list-style: none;
}
.no-text-deco {
  text-decoration: none;
}

.text-deco {
	text-decoration: underline !important;
}


/**
 * Borders
 */
.b-1s { border: 1px solid var(--brand-color); }
.b-2s { border: 2px solid var(--brand-color); }

.invert {
  &.b-1s, &.b-2s,
  .b-1s, .b-2s {
    border-color: white;
  }
}

.br-50 {
  border-radius: 50%;
}


/**
 * Margins & padding
 */

.m-auto {
  margin: auto;
}
.mx-auto {
  margin: 0 auto;
}

/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.mr-0
.mr-7
.mt-6
.mx-2
.pb-4
.pl-5
.py-3
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
or "x" / "y" for horizontal / vertical spacing
*/

$spaceamounts: ($space-0, $space-1, $space-2, $space-3, $space-4, $space-5, $space-6, $space-7, $space-8); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone
$axes: (x, y);

@each $space in $spaceamounts {
  $i: index($spaceamounts, $space) - 1; // 0, 1, 2, 3, etc.
  @each $side in $sides {
    .m#{str-slice($side, 0, 1)}-#{$i} {
      margin-#{$side}: #{$space};
    }
    .p#{str-slice($side, 0, 1)}-#{$i} {
      padding-#{$side}: #{$space};
    }
  }
  @each $axe in $axes {
    @if $axe == x {
      .m#{$axe}-#{$i} {
        margin-left: #{$space};
        margin-right: #{$space};
      }
      .p#{$axe}-#{$i} {
        padding-left: #{$space};
        padding-right: #{$space};
      }
    } @else {
      .m#{$axe}-#{$i} {
        margin-top: #{$space};
        margin-bottom: #{$space};
      }
      .p#{$axe}-#{$i} {
        padding-top: #{$space};
        padding-bottom: #{$space};
      }
    }
  }
}
